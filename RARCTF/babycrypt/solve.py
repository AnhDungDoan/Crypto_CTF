from math import sqrt
from Crypto.Util.number import inverse, isPrime, long_to_bytes
import gmpy2
from gmpy2 import mpz
import sympy.ntheory as nt

e = 65537
n = 9205850565099355009233119992333308509057926987587516553442010262770434065524651458723071213422539739783091104957937112504373819793996033829929775503108243
x = 571338771748514167423682983583747408415015678000205027955504564266299803503  
c = 7373290721518384012603108696715714033444163435512092120442505886297149465422635100860419886468382605598579995038885045596223387641682763096919583716818416                                                                       

p = 96233218453567386899062289913023542383565948338862363795229465881333122137089
q = 95661879681818872731638606929439794975150932660862158767273961317066822333587

phi = (p-1) * (q-1)

d = inverse(e, phi)

print(long_to_bytes(pow(c,d,n)))