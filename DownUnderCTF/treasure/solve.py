import re
from Crypto.Util.number import *
from Crypto.Random import random
import gmpy2

REAL_COORDS = 5756627544102572649201219381096443309301530404084814366157678459246004007288774904822314549
FAKE_COORDS = 5754622710042474278449745314387128858128432138153608237186776198754180710586599008803960884
p = 13318541149847924181059947781626944578116183244453569385428199356433634355570023190293317369383937332224209312035684840187128538690152423242800697049469987
REAL_COORDS2_3 = 3212023797359070207618890013558990479334108558649943801200640
REAL_COORDS_1 = 3611972407916542175266075914158485498567096639014910771412413427552155406084059648812480111141112665427480798617032727444845994871280603904723436033038518

def is_coords(s):
    try:
        return re.match(r'-?\d+\.\d+?, -?\d+\.\d+', long_to_bytes(s).decode())
    except:
        return False

print(long_to_bytes(REAL_COORDS))
print(long_to_bytes(FAKE_COORDS))
for i in range(100000):
    temp = FAKE_COORDS + p*i
    b, check = gmpy2.iroot(temp, 3)
    if (check == True):
        print("b = ", b)
        break

m = 2869341224917332313009265312495227025712569621383110354786034944049884444898065996165640916544755306105486353713866995648230401728598018943081224642657436
# print(pow(REAL_COORDS *REAL_COORDS_1 * REAL_COORDS2_3, 3, p))
# print('%.15f' % pow(REAL_COORDS,2/3))

# print(pow(REAL_COORDS,2))
# print(pow(3212023797359095191387490291951978689715826708825012842462276,3))
temp = pow(m,3)*REAL_COORDS_1 %p
d = inverse(3, p-1)
msg = pow(temp, d, p)
msg = 10954258416986940965254352563448744134121105790960391992791908032462708379320860571422885027991408179735966466488299908149056949839631488091514796075876201
print(msg)
print(pow(m,3)*REAL_COORDS_1 %p)

#msg * reveal